<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
<properties><title>Migration guide</title></properties>
<body>
<section>

    <h2>Migration guide</h2>
        <p>To migrate from an older DbUnit release to a newer one you can find some useful information here.</p>

    <subsection name="2.4.7 to 2.4.8">
      <p>There is a change to dependencies.
      <table border="1">
        <tr>
          <th>Tracker #</th>
          <th>Affects</th>
          <th>Migration</th>
          <th>Background information</th>
        </tr>

        <tr>
          <td>2905970</td>
          <td>XlsDataSet</td>
          <td>Upgrade to POI 3.5-FINAL or later.
          <td>POI moved static utility methods from org.apache.poi.hssf.usermodel.HSSFDateUtil to a superclass.
            This required a recompile against the new version, and clients will need to use the new version.
          </td>
          </td>
        </tr>
      </table>
      </p>
    </subsection>

    </subsection>
    <subsection name="2.4.3 to 2.4.4">
      <p>There has been a very small change to the API.</p>
      <table border="1">
        <tr>
          <th>Tracker #</th>
          <th>Affects</th>
          <th>Migration</th>
          <th>Background information</th>
        </tr>

        <tr>
          <td>2567724</td>
          <td><code>new method org.dbunit.IDatabaseTester#setOperationListener()</code></td>
          <td>If you extend from AbstractDatabaseTester then there is nothing to do. If you implement
          the IDatabaseTester interface then you must support the methods of IOperationListener. As
          reference implementation you can look at the AbstractDatabaseTester.</td>
          <td>This change was necessary to ensure that the user defined IDatabaseConnection setup provided by
          <code>DatabaseTestCase#setUpDatabaseConfig(DatabaseConfig databaseConfig)</code> is also used in
          the setUp and tearDown operations.
          </td>
        </tr>
        <tr>
          <td>1956543</td>
          <td><code>new method org.dbunit.database.IDatabaseConnection#createTable(String tableName, PreparedStatement preparedStatement)</code></td>
          <td>If you extend from AbstractDatabaseConnection then there is nothing to do. If you implement
          the IDatabaseConnection interface then you must implement the new method. As
          reference implementation you can look into AbstractDatabaseConnection.</td>
          <td>This addition comes from the feature request
            <a href='https://sourceforge.net/tracker/index.php?func=detail&amp;aid=1956543&amp;group_id=47439&amp;atid=449494'>1956543</a>
            where you can read details about why this is useful.
          </td>
        </tr>
        <tr>
          <td>1956543</td>
          <td><code>new method org.dbunit.database.IResultSetTableFactory#createTable(String tableName,
                        PreparedStatement preparedStatement, IDatabaseConnection connection)</code></td>
          <td>If you provide a custom IResultSetTableFactory then you have to implement this new method.
             As reference implementation you can look into ForwardOnlyResultSetTableFactory.</td>
          <td>This addition comes from the feature request
            <a href='https://sourceforge.net/tracker/index.php?func=detail&amp;aid=1956543&amp;group_id=47439&amp;atid=449494'>1956543</a>
            where you can read details about why this is useful.
          </td>
        </tr>
      </table>
    </subsection>

    <subsection name="2.4.2 to 2.4.3">
      <p>There has been a very small change to the API.</p>
      <table border="1">
        <tr>
          <th>Tracker #</th>
          <th>Affects</th>
          <th>Migration</th>
          <th>Background information</th>
        </tr>

        <tr>
          <td>2023994</td>
          <td><code>org.dbunit.DBTestCase#getConnection() is final</code></td>
          <td>To control the creation of the IDatabaseConnection, override method DBTestCase#newDatabaseTester() which provides
          the connection via IDatabaseTester#getConnection()</td>
          <td>The method DBTestCase#getConnection() is now final and the master object for retrieving a
          connection here is the IDatabaseTester. It is created via the DBTestCase#newDatabaseTester()
          method and provides the database connection via IDatabaseTester#getConnection. The reason for
          this change is firstly to provide a consistent access to the database connection
          and secondly to allow the user to easily configure dbunit properties by overriding the
          method setUpDatabaseConfig(DatabaseConfig databaseConfig).
          </td>
        </tr>
        <tr>
          <td>2023994</td>
          <td><code>Removed setters from org.dbunit.JdbcDatabaseTester and added constructors</code></td>
          <td>Just invoke the appropriate constructor of JdbcDatabaseTester</td>
          <td>The target of this little change is to ensure that every
          JdbcDatabaseTester instance is completely valid when it was successfully created.
          </td>
        </tr>
      </table>
    </subsection>



    <subsection name="2.2.x to 2.3.x">
      <p>There have been some smaller changes to the API from 2.2.x to 2.3.x with the effect that those versions are not source compatible.</p>
      <table border="1">
        <tr>
          <th>Tracker #</th>
          <th>Affects</th>
          <th>Migration</th>
          <th>Background information</th>
        </tr>

        <tr>
          <td>1993243</td>
          <td><code>org.dbunit.dataset.ITableMetaData.getColumnIndex()</code></td>
          <td>Inherit from org.dbunit.dataset.AbstractTableMetaData or implement the new method.</td>
          <td>This method has been introduced for performance improvements in the comparison of table data. Another
          goal is to improve the design by reusing this method at serveral locations where it has been re-implemented
          (or copy-pasted) multiple times before.
          </td>
        </tr>

        <tr>
          <td>1961269</td>
          <td><code>org.dbunit.dataset.datatype.IDataTypeFactory.createDataType(int sqlType, String sqlTypeName, String tableName, String columnName)</code></td>
          <td>Inherit from org.dbunit.dataset.datatype.DefaultDataTypeFactory or implement the new method.</td>
          <td>This method has been introduced for the new feature that lets users define a tolerated delta
          when comparing floating point numbers (database types NUMERIC and DECIMAL). Since the tolerated delta
          can (or needs to) be specified for a TABLE + COLUMN combination the new createDataType method provides
          those two additional parameters.
          </td>
        </tr>
      </table>
    </subsection>


</section>
</body>
</document>
