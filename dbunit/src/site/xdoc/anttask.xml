<?xml version="1.0" encoding="iso-8859-1"?>
<document>
  <properties>
    <title>Ant Integration</title>
  </properties>
  <body>
    <section>
    <h3>Ant Integration</h3>
    <h4>Installation</h4>The steps required to add the DbUnit task
    to your system are: 
    <p>1. Add the DbUnit jar to Ant's classpath. You may
    alternatively use the 'classpath' attribute of
    &lt;taskdef&gt;.</p>
    <p>2. Add a &lt;taskdef&gt; element to your build script as
    follows: 
    <source>
      <![CDATA[<taskdef name="dbunit" classname="org.dbunit.ant.DbUnitTask"/>]]>
</source></p>
    <p>3. Use the task in the rest of the buildfile.</p>
    <h3>Usage</h3>
    <p>Executes either a single transaction, or a group of
    transactions, under the DbUnit database testing framework.</p>
    <h4>Parameters</h4>
    <table border="1">
      <tr>
        <th>Attribute</th>
        <th>Description</th>
        <th>Required</th>
      </tr>
      <tr>
        <td>driver</td>
        <td>Class name of the jdbc driver. Must be available on the
        classpath (either system classpath or nested
        classpath)</td>
        <td>Yes</td>
      </tr>
      <tr>
        <td>url</td>
        <td>Database connection url</td>
        <td>Yes</td>
      </tr>
      <tr>
        <td>userid</td>
        <td>Database username</td>
        <td>Yes</td>
      </tr>
      <tr>
        <td>password</td>
        <td>Database password</td>
        <td>Yes</td>
      </tr>
      <tr>
        <td>schema</td>
        <td>Database schema</td>
        <td>No</td>
      </tr>
      <tr>
        <td>classpath</td>
        <td>Classpath used to load driver.</td>
        <td>No (use system classpath)</td>
      </tr>
      <tr>
        <td>useQualifiedTableNames</td>
        <td>Set the 
        <a href="properties.html#qualifiedtablenames">qualified
        table names</a>feature. Defaults to false. 
        <b>@deprecated since 2.4. Use nested <a href="#dbconfig">dbconfig</a> element instead.</b>
        </td>
        <td>No</td>
      </tr>
      <tr>
        <td>supportBatchStatement</td>
        <td>Set the 
        <a href="properties.html#batchstatement">batched
        statement</a>feature. Defaults to false.
        <b>@deprecated since 2.4. Use nested <a href="#dbconfig">dbconfig</a> element instead.</b>
        </td>
        <td>No</td>
      </tr>
      <tr>
        <td>datatypeWarning</td>
        <td>Set the 
        <a href="properties.html#typewarning">data type
        warning</a>feature. Defaults to true.
        <b>@deprecated since 2.4. Use nested <a href="#dbconfig">dbconfig</a> element instead.</b>
        </td>
        <td>No</td>
      </tr>
      <tr>
        <td>escapePattern</td>
        <td>Set the 
        <a href="properties.html#escapepattern">escape
        pattern</a>property.
        <b>@deprecated since 2.4. Use nested <a href="#dbconfig">dbconfig</a> element instead.</b>
        </td>
        <td>No</td>
      </tr>
      <tr>
        <td>datatypeFactory</td>
        <td>Set the 
        <a href="properties.html#typefactory">datatype
        factory</a>property.
        <b>@deprecated since 2.4. Use nested <a href="#dbconfig">dbconfig</a> element instead.</b>
        </td>
        <td>No</td>
      </tr>
      <tr>
        <td>skipOracleRecycleBinTables</td>
        <td>Set the 
        <a href="properties.html#skiporaclereyclebintables">
        skipOracleRecycleBinTables</a>feature.
        <b>@deprecated since 2.4. Use nested <a href="#dbconfig">dbconfig</a> element instead.</b>
        </td>
        <td>No</td>
      </tr>
      <tr>
        <td>batchSize</td>
        <td>Set the 
        <a href="properties.html#batchsize">
        batchSize</a>property.
        <b>@deprecated since 2.4. Use nested <a href="#dbconfig">dbconfig</a> element instead.</b>
        </td>
        <td>No</td>
      </tr>
      <tr>
        <td>fetchSize</td>
        <td>Set the 
        <a href="properties.html#fetchsize">
        fetchSize</a>property.
        <b>@deprecated since 2.4. Use nested <a href="#dbconfig">dbconfig</a> element instead.</b>
        </td>
        <td>No</td>
      </tr>
    </table>
    <h4>Parameters specified as nested elements</h4>
    <table cellspadding="0" border="1">
      <tr>
        <td>classpath</td>
        <td>
          <p>DbUnit's classpath attribute is a PATH like structure
          and can also be set via a nested classpath element. It is
          used to load the JDBC classes.</p>
        </td>
      </tr>
      <tr>
        <td><a name="dbconfig">dbconfig</a></td>
        <td>
          <p>DbUnit's configuration parameters to set any of the
            <a href="properties.html">properties</a> for the database connection.
          It supports all properties and features from the 
          <a href="apidocs/org/dbunit/database/DatabaseConfig.html">
          DatabaseConfig</a> java class, having the last path component of
          the property/feature URL as name. A more detailed example is
          shown at <a href="#dbconfigexample">dbconfig-example</a>.
          </p>
          <p>The nested &lt;property&gt; element <b>and</b> the nested 
             &lt;feature&gt; element looks as follows:
          </p>
          <table border="1">
            <tr>
              <th>Attribute</th>
              <th>Description</th>
              <th>Required</th>
            </tr>
            <tr>
              <td>name</td>
              <td>The name of the property/feature which must be the last path component of
              the property/feature URL (see <a href="properties.html">properties</a> for more).
              Example: for the property &quot;http://www.dbunit.org/properties/tableType&quot;
              the name is &quot;tableType&quot;.</td>
              <td>Yes</td>
            </tr>
            <tr>
              <td>value</td>
              <td>The value of the property/feature as string. Since feature are boolean values
              the string can take one of the values &quot;true&quot; or &quot;false&quot;.</td>
              <td>Yes</td>
            </tr>
          </table>
        </td>
      </tr>
      <tr>
        <td>operation</td>
        <td>
          <p>Use nested 
          <a class="code">&lt;query&gt;</a>elements to exportdata
          according to a sql statement. 
          <br /></p>
          <table border="1">
            <tr>
              <th>Attribute</th>
              <th>Description</th>
              <th>Required</th>
            </tr>
            <tr>
              <td>type</td>
              <td>Type of Database operation to perform. Supported
              types are UPDATE, INSERT, DELETE, DELETE_ALL,
              REFRESH, CLEAN_INSERT, MSSQL_INSERT, MSSQL_REFRESH,
              MSSQL_CLEAN_INSERT.</td>
              <td>Yes</td>
            </tr>
            <tr>
              <td>src</td>
              <td>The xml source upon which the operation is to be
              performed</td>
              <td>Yes</td>
            </tr>
            <tr>
              <td>format</td>
              <td>Format type of supplied source file. Possible
              values are "flat", "xml", "csv", "dtd", "xls".
              Defaults to 
              <b>"flat"</b></td>
              <td>
                <p>No</p>
              </td>
            </tr>
            <tr>
              <td>transaction</td>
              <td>Boolean indicating if this operation should be
              wrapped in a transaction, ensuring that the entire
              operation completes or is rolled back. This may also
              dramatically improve performance of large operations.
              Possible values are "true" or "false". Defaults to 
              <b>"false"</b>.</td>
              <td>
                <p>No</p>
              </td>
            </tr>
            <tr>
              <td>ordered</td>
              <td>If set to "true" the tables of the exported dataset 
              are ordered using a database key. Therefore dbunit uses
              the FilteredDataSet combined with the DatabaseSequenceFilter. 
              Defaults to <b>"false"</b></td>
              <td>
                <p>No</p>
              </td>
            </tr>
            <tr>
              <td>nullToken</td>
              <td>A String used to replace all occurrences of this String
              in a dataset with &lt;null&gt;. A common value for this 
              is &quot;[NULL]&quot;. Defaults to <b>null</b> which means 
              that no replacement occurrs.</td>
              <td>
                <p>No</p>
              </td>
            </tr>
          </table>
        </td>
      </tr>
      <tr>
        <td>export</td>
        <td>
          <p>Use nested &lt;export&gt; operation elements to export
          the database to the supplied filename. The default
          operation is to &lt;export&gt; the entire database to the
          destination filename with the supplied dataset type. You
          can specify individual tables or queries to
          &lt;export&gt; by nesting them under the &lt;export&gt;
          step.</p>
          <table width="100%" border="1">
            <tr>
              <th>Attribute</th>
              <th>Description</th>
              <th>Required</th>
            </tr>
            <tr>
              <td>dest</td>
              <td>The xml destination filename</td>
              <td>Yes</td>
            </tr>
            <tr>
              <td>format</td>
              <td>Format type of supplied destination file.
              Possible values are "flat", "xml" or "dtd". Defaults
              to 
              <b>"flat"</b></td>
              <td>No</td>
            </tr>
            <tr>
              <td>doctype</td>
              <td>If set and format is "flat", add DOCTYPE
              declaration referencing specified DTD to exported
              dataset. The DTD path can be absolute or
              relative.</td>
              <td>No</td>
            </tr>
            <tr>
              <td>ordered</td>
              <td>If set to "true" the tables of the exported dataset 
              are ordered using a database key. Therefore dbunit uses
              the FilteredDataSet combined with the DatabaseSequenceFilter. 
              Defaults to <b>"false"</b></td>
              <td>No</td>
            </tr>
            <tr>
              <td>encoding</td>
              <td>Desired encoding for XML-Output. Possible values are valid XML-Endings 
              like "UTF-8" or "ISO-8859-1". Defaults to <b>"UTF-8"</b>
              </td>
              <td>No</td>
            </tr>
          </table>
          <h4>Parameters specified as nested elements</h4>
          <table border="1">
            <tr>
              <td>table</td>
              <td>
                <p>Use nested &lt;table&gt; elements to export
                specific tables.</p>
                <table border="1">
                  <tr>
                    <th>Attribute</th>
                    <th>Description</th>
                    <th>Required</th>
                  </tr>
                  <tr>
                    <td>name</td>
                    <td>Name of the database table to export.</td>
                    <td>Yes</td>
                  </tr>
                </table>
              </td>
            </tr>
            <tr>
              <td>query</td>
              <td>
                <p>Use nested 
                <a class="code">&lt;query&gt;</a>elements to export
                data according to a sql statement.</p>
                <table border="1">
                  <tr>
                    <th>Attribute</th>
                    <th>Description</th>
                    <th>Required</th>
                  </tr>
                  <tr>
                    <td>name</td>
                    <td>Name to reference the sql statement.</td>
                    <td>Yes</td>
                  </tr>
                  <tr>
                    <td>sql</td>
                    <td>The sql to execute. You can use either
                    SELECT * from Mytable or SELECT col1, col4 from
                    MyTable</td>
                    <td>Yes</td>
                  </tr>
                </table>
              </td>
            </tr>
            <tr>
              <td>queryset</td>
              <td>
                <p>Use a &lt;queryset&gt; element to establish a
                group of &lt;query&gt; elements which can be
                referenced throughout the Ant project. Also use
                nested &lt;queryset&gt;s to include more than one
                &lt;query&gt; element for a table. QuerySets are
                joined together using a <a href="components.html#compositedataset">CompositeDataSet</a>.</p>
                <table border="1">
                  <tr>
                    <th>Attribute</th>
                    <th>Description</th>
                    <th>Required</th>
                  </tr>
                  <tr>
                    <td>id</td>
                    <td>Unique identifier for this element instance
                    which can be referred to using 'refid'.</td>
                    <td>No</td>
                  </tr>
                  <tr>
                    <td>refid</td>
                    <td>The reference 'id' of the queryset to refer
                    to.</td>
                    <td>No</td>
                  </tr>
                </table>
                <h4>Parameters specified as nested elements</h4>
                <table border="1">
                  <tr>
                    <td>
                      <a href="http://ant.apache.org/manual/CoreTypes/filterset.html">
                      filterset</a>
                    </td>
                    <td>Tokens can be specified when a
                    &lt;queryset&gt; reference is defined. Nested
                    filtersets specify values to replace when the
                    &lt;queryset&gt; is referenced. Tokens will be
                    replaced within values of &lt;query&gt; sql
                    attributes. (see 
                    <a href="#queryset-example">queryset example</a>)</td>
                  </tr>
                </table>
                <p>In order to use &lt;queryset&gt; elements with
                references, you must add the DbUnit Ant tasks to
                your project in one of the following ways, to
                ensure all elements are loaded with the same class
                loader.</p>
                <p>If you are using Ant version &gt; 1.6.0</p>
                <source>
                  <![CDATA[<typedef resource="org/dbunit/ant/antlib.xml"/> ]]>
                </source>
                <p>If you are using an Ant version &lt; 1.6</p>
                <source>
                  <![CDATA[
                    <taskdef name="dbunit" classname="org.dbunit.ant.DbUnitTask" loaderref="dbunit"/>
                    <typedef name="queryset" classname="org.dbunit.ant.QuerySet" loaderref="dbunit"/>
                ]]>
                </source>
              </td>
            </tr>
          </table>
        </td>
      </tr>
      <tr>
        <td>compare</td>
        <td>
          <p>Use nested &lt;compare&gt; elements to validate the
          content of the database against the specified dataset
          file.</p>
          <table border="1">
            <tr>
              <th>Attribute</th>
              <th>Description</th>
              <th>Required</th>
            </tr>
            <tr>
              <td>src</td>
              <td>The xml source upon which the comparison is to be
              performed</td>
              <td>Yes</td>
            </tr>
            <tr>
              <td>format</td>
              <td>Format type of supplied source file. Possible
              values are "flat" or "xml". Defaults to 
              <b>"flat"</b></td>
              <td>No</td>
            </tr>
            <tr>
              <td>sort</td>
              <td>Sorts tables prior comparison. Defaults to 
              <b>"false".</b></td>
              <td>No</td>
            </tr>
          </table>
          <h4>Parameters specified as nested elements</h4>
          <table border="1">
            <tr>
              <td>table</td>
              <td>
                <p>Use nested &lt;table&gt; elements to compare
                specific tables.</p>
                <table border="1">
                  <tr>
                    <th>Attribute</th>
                    <th>Description</th>
                    <th>Required</th>
                  </tr>
                  <tr>
                    <td>name</td>
                    <td>Name of the database table to compare.</td>
                    <td>Yes</td>
                  </tr>
                </table>
              </td>
            </tr>
            <tr>
              <td>query</td>
              <td>
                <p>Use nested 
                <a class="code">&lt;query&gt;</a>elements to
                compare data according to a sql statement.</p>
                <table border="1">
                  <tr>
                    <th>Attribute</th>
                    <th>Description</th>
                    <th>Required</th>
                  </tr>
                  <tr>
                    <td>name</td>
                    <td>Name of the database table to compare.</td>
                    <td>Yes</td>
                  </tr>
                  <tr>
                    <td>sql</td>
                    <td>The sql to execute. You can use either
                    SELECT * from Mytable or SELECT col1, col4 from
                    MyTable</td>
                    <td>Yes</td>
                  </tr>
                </table>
              </td>
            </tr>
          </table>
        </td>
      </tr>
    </table>
    <h3>Examples</h3>
    <h4>Update operation with specified JDBC driver jar</h4>
    <source>
      <![CDATA[
<dbunit driver="com.vendor.jdbc.Driver"
    url="jdbc:vendor:mydatabase"
    userid="user"
    password="password">
    <classpath>
        <pathelement location="/some/jdbc.jar"/>
    </classpath>
    <operation type="UPDATE" src="updateFile.xml"/>
</dbunit>]]>
    </source>
    <h4>Insert and update operations</h4>
    <source>
      <![CDATA[
<dbunit driver="com.vendor.jdbc.Driver"
        url="jdbc:vendor:mydatabase"
        userid="user"
        password="password">
    <operation type="INSERT" src="insertFile.xml"/>
    <operation type="UPDATE" src="updateFile.xml"/>
</dbunit>]]>
    </source>
    <h4>Database data export to XML</h4>
    <source>
      <![CDATA[
<dbunit driver="com.vendor.jdbc.Driver"
        url="jdbc:vendor:mydatabase"
        userid="user"
        password="password">
    <export dest="export.xml"/>
</dbunit>
]]>
    </source>
    <h4>Database structure export to DTD</h4>
    <source>
      <![CDATA[
<dbunit driver="com.vendor.jdbc.Driver"
        url="jdbc:vendor:mydatabase"
        userid="user"
        password="password">
    <export dest="export.dtd" format="dtd"/>
</dbunit>
]]>
    </source>
    <h4>
      <a name="partialexport">Partial database data export</a>
    </h4>
    <p>Export two tables: FOO, resulting from specified query and
    BAR entire content</p>
    <source>
      <![CDATA[
<dbunit driver="com.vendor.jdbc.Driver"
        url="jdbc:vendor:mydatabase"
        userid="user"
        password="password">
    <export dest="partial.xml">
        <query name="FOO" sql="SELECT COL1, COL2 FROM FOO WHERE COL1=4"/>
        <table name="BAR"/>
    </export>
</dbunit>]]>
    </source>
    <h4>
      <a name="databasecompare">Database data comparison</a>
    </h4>
    <source>
      <![CDATA[
<dbunit driver="com.vendor.jdbc.Driver"
        url="jdbc:vendor:mydatabase"
        userid="user"
        password="password">
    <compare src="expectedData.xml"/>
</dbunit>]]>
    </source>
    <h4>
      <a name="partialcompare">Partial database data comparison</a>
    </h4>
    <source>
      <![CDATA[
<dbunit driver="com.vendor.jdbc.Driver"
        url="jdbc:vendor:mydatabase"
        userid="user"
        password="password">
    <compare src="expectedData.xml">
        <query name="FOO" sql="SELECT COL1, COL2 FROM FOO WHERE COL1=4"/>
        <table name="BAR"/>
    </compare>
</dbunit>]]>
    </source>
    <h4>
      <a name="queryset-example">Partial CSV export using queryset reference.</a>
    </h4>
    <p>Export employees with specified userNames, as well as all
    managers.</p>
    <source>
      <![CDATA[
<!-- ======== Define the reference. Note that before ant 1.6
              this would have to be within a target. ====== -->
<queryset id="employees">
   <query name="EMPLOYEE"
     sql="SELECT * FROM EMPLOYEE WHERE EMP_ID IN (@subQuery@)"/>
   <query name="EMP_ADDRESS" sql="
       SELECT B.* FROM EMPLOYEE A, EMP_ADDRESS B
       WHERE A.EMP_ID IN (@subQuery@)
       AND B.EMP_ID = A.EMP_ID"/>
</queryset>
.....
<!-- ========= Use the reference ====================== -->

<dbunit driver="${jdbcDriver}"
        url="${jdbcURL}" 
        userid="${jdbcUser}" 
        password="${jdbcPassword}">
  <export dest="someDir" format="csv">
    <queryset refid="employees">
       <filterset>
         <filter token="subQuery" value="
           SELECT EMP_ID FROM EMPLOYEE WHERE USER_NAME IN('joe', 'schmo')"/>
       </filterset>
    </queryset>
    <queryset refid="employees">
       <filterset>
         <filter token="subQuery" value="
           SELECT EMP_ID FROM EMPLOYEE WHERE IS_MANAGER = 1"/>
       </filterset>
    </queryset>
  </export>
</dbunit>]]>
    </source>

    <h4>
      <a name="dbconfigexample">DatabaseConfig example with nested configuration</a>
    </h4>
    <source>
      <![CDATA[
<dbunit driver="com.vendor.jdbc.Driver"
        url="jdbc:vendor:mydatabase"
        userid="user"
        password="password">
    <dbconfig>
        <property name="datatypeFactory" value="org.dbunit.ext.oracle.OracleDataTypeFactory" />
        <!-- Is internally split to a string array using the comma as separator -->
        <property name="tableType" value="TABLE,SYNONYM" />
        <feature name="batchedStatements" value="true" />
    </dbconfig>

    ...
</dbunit>]]>
    </source>

</section>
</body>
</document>
