<?xml version="1.0" encoding="ISO-8859-1"?>
<document><properties><title>Getting Started</title></properties><body><section>      
    <h3>Getting Started</h3>
      <ol><li><a href="#createtest">
        Database setup with DBTestCase subclass
      </a></li>
      <li><a href="#noextend">
        Database setup with your own TestCase subclass
      </a></li>
      <li><a href="#assertdata">
        Database data verification
      </a></li>
      <li><a href="#canoo">
        DbUnit Ant task and Canoo WebTest 
      </a></li></ol>    
      <a name="createtest">
      <h3>Database setup with DBTestCase subclass</h3>
      </a> 
      <a name="createdataset"><h4>Step 1: Create your dataset file</h4></a>
      <p>Your test need some data to work with. This means you must
      create a dataset. In most situations you will work with xml datasets. You
      can manually create a <a href="components.html#FlatXmlDataSet">flat XML dataset</a> 
      from scratch or create one by <a href="faq.html#extract">exporting</a>
      some data from your database.
      </p>
      <h4>Step 2: Extend the DBTestCase class</h4>
      <p>Now you need to create a test class. The easiest way to use Dbunit is to
      make your test class extend the DBTestCase class. DBTestCase
      extends the JUnit TestCase class. A template method is required to be
      implemented: <a class="code">getDataSet()</a> to return the dataset
      you created in step 1. DBTestCase relies on a IDatabaseTester to do
      its work, the default configuration uses PropertiesBasedJdbcDatabaseTester, it locates
      configuration for the DriverManager within the Sytem properties.
      The simplest way to configure it would be in the constructor of your test class.
      You may modify this behavior by overriding <a class="code">getDatabaseTester()</a>,</p>
      using one of the other 3 provided IDatabaseTester implementations or your own.
      You may also use the other subclasses of DBTestCase described in the next table:
      <table>
         <tr><td valign="top"><a class="code">JdbcBasedDBTestCase</a></td>
             <td>uses a DriverManager to create connections (with the aid of a JdbcDatabaseTester).</td></tr>
         <tr><td valign="top"><a class="code">DataSourceBasedDBTestCase</a></td>
             <td>uses a javax.sql.DataSource to create connections (with the aid of a DataSourceDatabaseTester).</td></tr>
         <tr><td valign="top"><a class="code">JndiBasedDBTestCase</a></td>
             <td>uses a javax.sql.DataSource located through JNDI (with the aid of a JndiDatabaseTester).</td></tr>
      </table><br/>
      <p>
      Following is a sample implementation that returns a connection to a Hypersonic
      database and a xml dataset:
      <source>
public class SampleTest extends DBTestCase
{
    public SampleTest(String name)
    {
        super( name );
        System.setProperty( PropertiesBasedJdbcDatabaseTester.DBUNIT_DRIVER_CLASS, "org.hsqldb.jdbcDriver" );
        System.setProperty( PropertiesBasedJdbcDatabaseTester.DBUNIT_CONNECTION_URL, "jdbc:hsqldb:sample" );
        System.setProperty( PropertiesBasedJdbcDatabaseTester.DBUNIT_USERNAME, "sa" );
        System.setProperty( PropertiesBasedJdbcDatabaseTester.DBUNIT_PASSWORD, "" );
	// System.setProperty( PropertiesBasedJdbcDatabaseTester.DBUNIT_SCHEMA, "" );
    }

    protected IDataSet getDataSet() throws Exception
    {
        return new FlatXmlDataSetBuilder().build(new FileInputStream("dataset.xml"));
    }
}</source>
</p>      
      <h4>Step 3: (Optional) Implement getSetUpOperation() and getTearDownOperation()
        methods</h4>
      <p>By default, Dbunit performs a <a href="components.html#cleanInsert">CLEAN_INSERT</a>
        operation before executing each test and performs no cleanup operation
        afterward. You can modify this behavior by overriding <a class="code">getSetUpOperation()</a>
        and <a class="code">getTearDownOperation()</a>.</p>
      <p>The following example demonstrates how you can easily override the operation
        executed before or after your test.
      <source>
public class SampleTest extends DBTestCase
{
    ...
    protected DatabaseOperation getSetUpOperation() throws Exception
    {
        return DatabaseOperation.REFRESH;
    }

    protected DatabaseOperation getTearDownOperation() throws Exception
    {
        return DatabaseOperation.NONE;
    }
    ...
}</source>
      </p>

      <h4>Step 4: (Optional) Override method setUpDatabaseConfig(DatabaseConfig config)</h4>
      <p>Use this to change some configuration settings of the dbunit DatabaseConfig.</p>
      <p>The following example demonstrates how you can easily override this method:
      <source>
public class SampleTest extends DBTestCase
{
    ...
    /**
     * Override method to set custom properties/features
     */
    protected void setUpDatabaseConfig(DatabaseConfig config) {
        config.setProperty(DatabaseConfig.PROPERTY_BATCH_SIZE, new Integer(97));
        config.setFeature(DatabaseConfig.FEATURE_BATCHED_STATEMENTS, true);
    }
    ...
}</source>
      </p>

      <h4>Step 5: Implement your testXXX() methods</h4>
      <p>Implement your test methods as you normally would with JUnit. Your database
      is now initialized before and cleaned-up after each test methods according
      to what you did in previous steps.</p>
      
      
      <a name="noextend">
      <h3>Database setup with your own TestCase subclass</h3>
      </a>
      <p>In order to use Dbunit you are not required to extend the DBTestCase
      class. You can override the standard JUnit setUp() method and execute the
      desired operation on your database. Do something similar in teardown() if
      you need to perform clean-up.</p>
      <p>
      For example:
      <source>
public class SampleTest extends TestCase
{
    public SampleTest(String name)
    {
        super(name);
    }

    protected void setUp() throws Exception
    {
        super.setUp();

        // initialize your database connection here
        IDatabaseConnection connection = null;
        // ...

        // initialize your dataset here
        IDataSet dataSet = null;
        // ...

        try1
        {
            DatabaseOperation.CLEAN_INSERT.execute(connection, dataSet);
        }
        finally
        {
            connection.close();
        }
    }
    ...
}</source></p>
      <p>Since version 2.2 you may use the new IDatabaseTester to accomplish the same feat. 
      As explained in the previous topic, DBTestCase uses a IDatabaseTester internally to do its work; your test class
      may also use this feature to manipulate DataSets. Currently there are 4 convenient implementations:<br/>
      <table>
         <tr><td valign="top"><a class="code">JdbcDatabaseTester</a></td>
             <td>uses a DriverManager to create connections.</td></tr>
         <tr><td valign="top"><a class="code">PropertiesBasedJdbcDatabaseTester</a></td>
             <td>also uses DriverManager, but the configuration is taken from system properties.<br/>
                 This is the default implementation used by DBTestCase.</td></tr>
         <tr><td valign="top"><a class="code">DataSourceDatabaseTester</a></td>
             <td>uses a javax.sql.DataSource to create connections.</td></tr>
         <tr><td valign="top"><a class="code">JndiDatabaseTester</a></td>
             <td>uses a javax.sql.DataSource located through JNDI.</td></tr>
      </table><br/>
      You may also provide your own IDatabaseTester implementation. It is recommended to 
      use AbstractDatabaseTester as a starting point.</p>
      <p>
      Example:
      <source>
public class SampleTest extends TestCase
{
    private IDatabaseTester databaseTester;

    public SampleTest(String name)
    {
        super(name);
    }

    protected void setUp() throws Exception
    {
        databaseTester = new JdbcDatabaseTester("org.hsqldb.jdbcDriver",
            "jdbc:hsqldb:sample", "sa", "");

        // initialize your dataset here
        IDataSet dataSet = null;
        // ...

        databaseTester.setDataSet( dataSet );
	// will call default setUpOperation
        databaseTester.onSetUp();
    }

    protected void tearDown() throws Exception
    {
	// will call default tearDownOperation
        databaseTester.onTearDown();
    }
    ...
}</source></p>
      <a name="assertdata">
      <h3>Database data verification</h3>
      </a> 
      <p>Dbunit provides support for verifying whether two tables or datasets
      contain identical data. The following two methods can be used to verify if 
      your database contains the expected data during 
      test cases execution.
      <source>public class Assertion
{
    public static void assertEquals(ITable expected, ITable actual)
    public static void assertEquals(IDataSet expected, IDataSet actual)
}</source></p>
      <h4>Sample</h4>
      <p>The following sample, show how to compare a database table snapshot
        against a flat XML table.
      <source>public class SampleTest extends DBTestCase
{
    public SampleTest(String name)
    {
        super(name);
    }

    // Implements required setup methods here
    ...

    public void testMe() throws Exception
    {
        // Execute the tested code that modify the database here
        ...


        // Fetch database data after executing your code
        IDataSet databaseDataSet = getConnection().createDataSet();
        ITable actualTable = databaseDataSet.getTable("TABLE_NAME");

        // Load expected data from an XML dataset
        IDataSet expectedDataSet = new FlatXmlDataSetBuilder().build(new File("expectedDataSet.xml"));
        ITable expectedTable = expectedDataSet.getTable("TABLE_NAME");

        // Assert actual database table match expected table
        Assertion.assertEquals(expectedTable, actualTable);
    }
}</source>      </p>
      <p>The actual dataset is a database snapshot you 
      want to verify against an expected dataset. As its name imply, the expected 
      dataset contains the expectation values. 
      </p>
      <p>The expected dataset must be different from the one you have used to
        setup your database. Therefore you need two datasets to do that; one to
        setup your database before a test and another to provide the expected
        data during the test.</p>

      <a name="assertquery"><h4>Using a query to take the database snapshot</h4></a>
      <p>You can also verify if the result of a query match an expected set of
        data. The query can be used to select only a subset of a table or even
        join multiple tables together.
      <source>        ITable actualJoinData = getConnection().createQueryTable("RESULT_NAME",
                "SELECT * FROM TABLE1, TABLE2 WHERE ..."); </source>
      </p>
      <a name="compareignorecolumns"><h4>Ignoring some columns in comparison</h4></a>
      <p>
Sometimes this is desirable to ignore some columns to perform the comparison; particularly for primary keys, date or time columns having values generated by the code under test.
One way to do this is to omit to declare unwanted columns in your expected table. You can then filter the actual database table to only expose the expected table columns. 
<br/>
The following code snippet shows you how to filter the actual table. To works, the actual table MUST contain at least ALL the columns from the expected table. Extra columns can exist in the actual table but not in the expected one.
<source>        
    ITable filteredTable = DefaultColumnFilter.includedColumnsTable(actual, 
            expected.getTableMetaData().getColumns());
    Assertion.assertEquals(expected, filteredTable); 
</source>
</p>
<p>
A major limitation of this technique is that you cannot use a DTD with your expected flat XML dataset. With a DTD you need to filter columns from both the expected and the actual table. See the FAQ about 
<a href="faq.html#columnfilter">excluding some table columns at runtime</a>.
</p>
      
      <a name="roworder"><h4>Row ordering</h4></a>
      <p>By default, database table snapshot taken by DbUnit are sorted by primary
        keys. If a table does not have a primary key or the primary key is automatically
        generated by your database, the rows ordering is not predictable and <code>assertEquals</code>
        will fail.</p>
      <p>You must order your database snapshot manually by using <code>IDatabaseConnection.createQueryTable</code>
        with an "ORDER BY" clause. Or you can use the <code>SortedTable</code>
        decorator class like this:
      <source>
          Assertion.assertEquals(new SortedTable(expected),
                new SortedTable(actual, expected.getTableMetaData()));
      </source>
      Note that the SortedTable uses the string value of each column for doing the sort by default. So if you are
      sorting a numeric column you notice that the sort order is like <i>1, 10, 11, 12, 2, 3, 4</i>. If you want to use
      the columns datatype for sorting (to get the columns like <i>1, 2, 3, 4, 10, 11, 12</i>) you can do this as follows:
      <source>
          SortedTable sortedTable1 = new SortedTable(table1, new String[]{"COLUMN1"});
          sortedTable1.setUseComparable(true); // must be invoked immediately after the constructor
          SortedTable sortedTable2 = new SortedTable(table2, new String[]{"COLUMN1"});
          sortedTable2.setUseComparable(true); // must be invoked immediately after the constructor
          Assertion.assertEquals(sortedTable1, sortedTable2);
      </source>
      <i>The reason why the parameter is currently not in the constructor is that the number of constructors needed for
        SortedTable would increase from 4 to 8 which is a lot. Discussion should go on about this feature on how to implement
        it the best way in the future.
      </i>
      </p>
      
      
      <a name="assert-collect-diff"><h4>Assert and collect the differences</h4></a>
      <p>By default, dbunit immediately fails when the first data difference was found.
      Starting with dbunit 2.4 it is possible to register a custom 
      <a href="apidocs/org/dbunit/assertion/FailureHandler.html">FailureHandler</a>
      which lets users specify which kinds of exceptions to be thrown and how to handle
      the occurrences of data differences. Using the  
      <a href="apidocs/org/dbunit/assertion/DiffCollectingFailureHandler.html">DiffCollectingFailureHandler</a>
      you can avoid an exception to be thrown on a data mismatch so that you can
      evaluate all results of the data comparison afterwards.
      </p>
      <p>
      <source>
IDataSet dataSet = getDataSet();
DiffCollectingFailureHandler myHandler = new DiffCollectingFailureHandler();
//invoke the assertion with the custom handler
assertion.assertEquals(dataSet.getTable("TEST_TABLE"),
                       dataSet.getTable("TEST_TABLE_WITH_WRONG_VALUE"),
                       myHandler);
// Evaluate the results and throw an failure if you wish
List diffList = myHandler.getDiffList();
Difference diff = (Difference)diffList.get(0);
...
      </source>
      </p>

      
      <a name="canoo">
      <h3>DbUnit Ant task and Canoo WebTest</h3>
      </a>
      <p>By Eric Pugh</p>
      <p>With Dbunit Ant tasks, Dbunit makes it much easier to run Canoo WebTest
        scripts for database centric applications. <a href="http://webtest.canoo.com">WebTest</a>
        is a tool to simulate a user's browser clicking through the pages on a
        web site. It allows you to create a series of Ant based tests for your
        website. In fact, this can be used to perform User Acceptance tests for
        websites built using non Java technologies like ColdFusion or ASP! This
        document walks you through a suggested format for storing tests. 
      </p>
      <h4>Step 1: Create your dataset file</h4>
      <p>Your first step is to create your dataset file that you want to load into
      your database before running your WebTest script. Use one of the various
      methods <a href="#createdataset">described above</a>. Put the various datasets you need in a <code>/data</code>
      directory.</p>
      <h4>Step 2: Create your Ant build.xml file</h4>
      <p>A suggested setup is to have a single build.xml file that is the entry point
      for all your tests. This would include a couple targets like:
      <ol>
        <li> <code>test</code>: Runs all the testSuites that you have created
        </li><li> <code>test:single</code>: Runs a single test in a specific testSuite
        </li><li> <code>test:suite</code>: Runs all the tests for a specific testSuite
      </li></ol></p>
      <h4>Step 3: Create your various Test Suites</h4>
      <p>Once you have your build.xml file set up, you can now call the various TestSuites.
      Create a separate TestSuiteXXX.xml for the various modules that you would
      like to test. In your TestSuiteXXX.xml, you should have your default target
      testSuite call all the testcases you have definied:
      <source><![CDATA[      <target name="testSuite">

        <antcall target="unsubscribeEmailAddressWithEmail"/>
        <antcall target="unsubscribeEmailAddressWithEmailID"/>
        <antcall target="unsubscribeEmailAddressWithNewEmailAddress"/>

        <antcall target="subscribeEmailAddressWithOptedOutEmail"/>
        <antcall target="subscribeEmailAddressWithNewEmailAddress"/>
        <antcall target="subscribeEmailAddressWithInvalidEmailAddress"/>

      </target>]]></source></p>
      <p>This way you can either run all the test's in your Test Suite, or just run
      a specific one, all from build.xml!</p>
      <h4>Step 4: Create your various Tests</h4>
      <p>Now you need to write your various testcases. For more information on WebTest,
      please refer to the <a href="http://webtest.canoo.com">WebTest home page</a>.
      If you have find you are duplicating pieces of XML, then place them in a
      <code>/includes</code> directory. If you have a single set of properties,
      then load them as part of build.xml by specifing them in your build.properties
      file. If you have multiple databases you need to connect to, then declare
      your sql connection properties in a TestSuiteXXX.properties file that you
      load on a per suite basis. In this example, we are using doing a clean insert
      into the database, and using the MSSQL_CLEAN_INSERT instead of CLEAN_INSERT
      because of the requirement to do identity column inserts.
      <source><![CDATA[      <target name="subscribeEmailAddressWithOptedOutEmail">
        <dbunit
            driver="${sql.jdbcdriver}"
            url="${sql.url}"
            userid="${sql.username}"
            password="${sql.password}">
                <operation type="MSSQL_CLEAN_INSERT"
                      src="data/subscribeEmailAddressWithOptedOutEmail.xml"
                format="flat"/>
        </dbunit>
        <testSpec name="subscribeEmailAddressWithOptedOutEmail">
          &amp;sharedConfiguration;
          <steps>
            <invoke stepid="main page"
              url="/edm/subscribe.asp?e=subscribeEmailAddressWithOptedOutEmail@test.com"
              save="subscribeEmailAddressWithNewEmailAddress"/>
            <verifytext stepid="Make sure we received the success message"
              text="You have been subscribed to the mailing list"/>

          </steps>
        </testSpec>
      </target>]]></source>
      </p>
      <h4>Sample Directory Layout</h4>
      <p>When you are done, you will have a series of files that look like this:
      <source>      \root\
        <a href="sample_webtest/build.xml">build.xml</a>
        <a href="sample_webtest/build.properties">build.properties</a>
        <a href="sample_webtest/TestSuiteEDM.xml">TestSuiteEDM.xml</a>
        <a href="sample_webtest/TestSuiteEDM.properties">TestSuiteEDM.properties</a>
      \root\data\
        <a href="sample_webtest/subscribeEmailAddressWithOptedOutEmail.xml">subscribeEmailAddressWithOptedOutEmail.xml</a>
      \root\includes\
        <a href="sample_webtest/sharedConfiguration.xml">sharedConfiguration.xml</a></source></p>
</section></body></document>
