 ----
Building DbUnit
 ----
Felipe Leme
 ----
23 December 2006

Overview

  Building DbUnit is quite simple; all you need is JDK 1.4+, Subversion and Maven 2. Once you have them all, you can build DbUnit by just typing mvn! Anyway, the items below describe every step

Preparation

 * 1.Install Java SE SDK version 1.4 (link)or newer (although DbUnit is Java 1.3 compatible, Maven 2 requires 1.4)
 * 2.Install Maven 2 (link)
 * 3.Download DbUnit code, either current (link) or released (link) source
 * 4.On the root directory, simply type <code>mvn</code> in the command line (if you need to clean up the binaries, run <code>mvn clean install</code> instead). The jar file will be generated in the target directory.


Creating the site

 Run <code>mvn site:site</code> in the command line; the site will be available on <code>target/site/index.html</code>. Note that you might get an OutOfMemoryExceptionError; if that happens, you must increase the heap size through the MAVEN_OPTS variable (for instance, on Unix systems you could run <code>MAVEN_OPTS=-mx512M mvn site:site</code>).

Using an IDE

  As DbUnit uses Maven, it's not necessary to store IDE-specific information in the source repository. Instead, these meta-data can be dynamically generate by Maven. For instance, to create an Eclipse project, it's just a matter of typing <code>mvn eclipse:eclipe</code>. See more details on (link)Maven Eclipse Plugin, Mevenide for NetBeans, Maven IDEA plugin


Contributing patches

  If you are building DbUnit in order to contribute a patch, it's necessary to compile it using Java SE 1.3, which takes 3 adittional steps:

1.Create an environment variable called JAVA_1_3_HOME pointing to the root of the Java 1.3 installation
2.Download JDBC xxx (link)
3.Run the command  <code>mvn install:install-file -DgroupId=javax.sql -DartifactId=jdbc-stdext -Dversion=2.0 -Dpackaging=jar -Dfile=_path_to_the_jdbc_2_0_stdext_jar_</code>
4.Run Maven using the <code>official</code> profile, i.e., <code>mvn -Pofficial clean install</code>. You should also generate the IDE meta-data using this profiling (for instance, <code>mvn -Pofficial eclipse:eclipse), and configure your IDE to use Java 1.3 for that project
5.Once you finish your modifications, run <code>svn diff > name_of_the_patch_file</code> (or use your IDE) to generate a patch file and submit it on the web site (link). Don't forget to include test cases!

Maintenance tasks

 The tasks described below describes how to maintain DbUnit

Updating the repository and site

 Once new code is incorporated in the SVN code, it is necessary to update the Maven 2 repository with new snapshots and also update the site. These 2 tasks can be done with a simple command:

mvn -Pofficial clean site:site source:jar javadoc:jar deploy site:deploy 

Cutting a release

 Cutting a release requires 4 steps: create a SVN tag, generate the artifacts, update the site and upload the artifacts into SourceForge.
 
 Fortunatelly, the first 3 steps can be achieve using Maven Release Plugin, as follow:

 The final step must be done manually, logging in SourceForge and uploading the following files:

XXX

It is also nice to send a message to the mailing lists; ideally that should be done automatically, as the maven-announcement-plugin did for Maven 1.


Fixing a bug/request

 Everytinme a bug is fixed (or request is implemented), it is necesary to update the src/site/changes.xml file.
