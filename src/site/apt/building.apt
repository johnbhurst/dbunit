 ----
Building DbUnit
 ----
Felipe Leme
 ----
23 December 2006

Overview

  Building DbUnit is quite simple; all you need is JDK 1.4+, Subversion and Maven 2. Once you have them all, you can build DbUnit by just typing <<mvn>>! Anyway, the items below describe every step.

Generating the JAR

 [[1]] Install {{{http://java.sun.com/javase/}Java SE SDK}} version 1.4 or newer (Java 1.4 is required by Maven 2 as well as DbUnit)

 [[2]] Install {{{http://maven.apache.org}Maven 2}}

 [[3]] Download DbUnit code, either current or released source (see <<Quick Links>> on left menu)

 [[4]] On the root directory, simply type <<<mvn>>> in the command line (if you need to clean up the binaries, run <<<mvn clean install>>> instead). The jar file will be generated in the target directory.


Creating the site

 Run <<<mvn site:site>>> in the command line; the site will be available on <<<target/site/index.html>>>. Note that you might get an <OutOfMemoryExceptionError>; if that happens, you must increase the heap size through the <MAVEN_OPTS> variable (for instance, on Unix systems, you could run <<<MAVEN_OPTS=-mx512M mvn site:site>>>).

Using an IDE

  As DbUnit uses Maven, it is not necessary to store IDE-specific information in the source repository. Instead, these meta-data can be dynamically generate by Maven. 
  For instance, to create an Eclipse project, it is just a matter of typing <<<mvn eclipse:eclipse>>>. 
  See more details on {{{http://maven.apache.org/plugins/maven-eclipse-plugin/}Maven Eclipse Plugin}}, {{{http://mevenide.codehaus.org/m2-site/index.html}Mevenide for NetBeans}}, and {{{http://maven.apache.org/plugins/maven-idea-plugin/}Maven IDEA plugin}} respectively.
  Further the {{{http://m2eclipse.codehaus.org}m2eclipse Plugin}} might be of interest to you


Contributing patches

  If you are building DbUnit in order to contribute a patch, it is necessary to compile it using Java SE 1.4, which takes 3 adittional steps:

  [[1]] Create an environment variable called JAVA_1_4_HOME pointing to the root of the Java 1.4 installation

  [[2]] Download JDBC {{{http://java.sun.com/products/jdbc/download.html}JDBC 2.0 Optional Package Binary}}

  [[3]] Run the command  <<<mvn install:install-file -DgroupId=javax.sql -DartifactId=jdbc-stdext -Dversion=2.0 -Dpackaging=jar -Dfile=_path_to_the_jdbc_2_0_stdext_jar_>>>

  [[4]] Run Maven using the <<official>> profile, i.e., <<<mvn -Pofficial clean install>>>. You should also generate the IDE meta-data using this profiling (for instance, <<<mvn -Pofficial eclipse:eclipse>>>), and configure your IDE to use Java 1.4 for that project

  [[5]] Once you finish your modifications, run <<<svn diff > name_of_the_patch_file>>> (or use your IDE) to generate a patch file and submit it on {{{http://sourceforge.net/tracker/?group_id=47439&atid=449493} DbUnit SourceForge site}}. Do not forget to include test cases!

======

Maintenance tasks

 The tasks described below describes how to maintain DbUnit. Some of these tasks will use <ssh> to upload files to SourceForge, so it is necessary to setup your environment to allow it (typically using <ssh-agent> - see more details on {{{http://sourceforge.net/docman/display_doc.php?docid=761&group_id=1} SourceForge}}).  Also notice that in 2008 SourceForge changed the way it provides shell access, so you need to create a temporary shell for your user before using ssh (see instructions {{{http://people.apache.org/~baerrach/maven-site-plugin-2.0-beta-8-SNAPSHOT/examples/site-deploy-to-sourceforge.net.html} here}}.


Updating the repository and site

 Once new code is incorporated in the SVN code, it is necessary to update the Maven 2 repository with new snapshots, and also update the site. These 2 tasks can be done with a simple command:

---
mvn -Pofficial clean source:jar javadoc:jar deploy site:site site:deploy
---

Cutting a release

 Cutting a release requires the following steps: creating a SVN tag, generating the artifacts, updating the site, uploading the artifacts into SourceForge, uploading the artifacts on {{{http://ibiblio.net/maven2}ibiblio}}, and sending the announcement emails.
 
 Fortunatelly, most of the steps can be automated by Maven. The first 3 steps can be achieve using {{{http://maven.apache.org/plugins/maven-release-plugin/}Maven Release Plugin}}, as follow:

---
mvn -Pofficial release:prepare
---

 and then:

---
mvn -Pofficial release:perform
---

 That last command has created all necesary files for the fourth and fifth steps in the <<<target/checkout/target>>> directory. So, for the fourth step, log in SourceForge and uploading the following files:

 * <dbunit-RELEASE.jar>

 * <dbunit-RELEASE-sources.jar>

 * <dbunit-RELEASE-javadoc.jar>

 []

 And for the fifth step, create a {{{http://jira.codehaus.org/secure/CreateIssue.jspa?pid=10367&issuetype=3}Jira request}} and upload the <<<XXX/target/dbunit-RELEASE-bundle.jar>>>) file (see {{{http://maven.apache.org/guides/mini/guide-ibiblio-upload.html}Guide to uploading artifacts to The Central Repository}} for detailed instructions). NOTE: it is also necessary to create dbunit-RELEASE.tar.gz and dbunit-RELEASE.zip - I think Maven does that, but could not test by the time of the 2.2 release.

 The final step can also be done by Maven, using the {{{http://maven.apache.org/plugins/maven-changes-plugin/}Maven Changes Plugin}}:

---
mvn changes:announcement-mail
---

 Note that it is nice to change the release's introduction message first - look for the plugin's <<<introduction>>> parameter in the <<<pom.xml>>>; please change such an element before tagging the release.

Fixing a bug/request

 Everytime a bug is fixed (or request is implemented), it is necessary to update the <<<src/changes/changes.xml>>> file.
