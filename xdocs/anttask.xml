<?xml version="1.0" encoding="ISO-8859-1"?>
<document><properties><title>The Dbunit Framework - Ant Task</title></properties><body><section>
      <h2>Ant Integration</h2>
      <h3>Installation</h3>
      The steps required to add the DbUnit task to your system are: 
      <ol>
        <li>Add the DbUnit jar to Ant's classpath. </li>
        <li>Add a &lt;taskdef&gt; element to your build script as follows: 
          <pre class="code">&lt;taskdef name="dbunit" classname="org.dbunit.ant.DbUnitTask"/&gt;</pre>
        </li>
        <li>Use the task in the rest of the buildfile. </li>
      </ol>
      <h3>Usage </h3>
      <p>Executes either a single transaction, or a group of transactions, under 
        the DbUnit database testing framework.</p>
      <h4>Parameters</h4>
      <table border="1">
        <tr> 
          <td><b>Attribute</b></td>
          <td><b>Description</b></td>
          <td><b>Required</b></td>
        </tr>
        <tr> 
          <td>driver</td>
          <td>Class name of the jdbc driver</td>
          <td>Yes</td>
        </tr>
        <tr> 
          <td>url</td>
          <td>Database connection url</td>
          <td>Yes</td>
        </tr>
        <tr> 
          <td>userid</td>
          <td>Database username</td>
          <td>Yes</td>
        </tr>
        <tr> 
          <td>password</td>
          <td>Database password</td>
          <td>Yes</td>
        </tr>
        <tr> 
          <td>schema </td>
          <td>Database schema</td>
          <td>No</td>
        </tr>
        <tr> 
          <td>classpath</td>
          <td>Classpath used to load driver</td>
          <td>No (use system classpath)</td>
        </tr>
        <tr> 
          <td>useQualifiedTableNames</td>
          <td>Set System.property dbunit.qualified.table.names <br></br>
            equal to supplied boolean value</td>
          <td>No</td>
        </tr>
        <tr> 
          <td>supportBatchStatement</td>
          <td>Set System.property<br></br>
            dbunit.support.batch.statement<br></br>
            equal to supplied boolean value</td>
          <td> No</td>
        </tr>
      </table>
      <h4>Parameters specified as nested elements</h4>
      <table cellspadding="0" border="1">
        <tr> 
          <td>classpath</td>
          <td> 
            <p>DbUnit's classpath attribute is a PATH like structure and can also 
              be set via a nested classpath element. It is used to load the JDBC 
              classes.</p>
          </td>
        </tr>
        <tr> 
          <td>operation</td>
          <td> 
            <p>Use nested &lt;operation&gt; elements to specify which DbUnit operation 
              to perform on the particular file. <br></br>
            </p>
            <table border="1">
              <tr> 
                <td><b>Attribute</b></td>
                <td><b>Description</b></td>
                <td><b>Required</b></td>
              </tr>
              <tr> 
                <td>type</td>
                <td>Type of Database operation to perform. Supported types are<br></br>
                  UPDATE, INSERT, DELETE, <br></br>
                  DELETE_ALL, REFRESH, <br></br>
                  CLEAN_INSERT, MSSQL_INSERT,<br></br>
                  MSSQL_REFRESH, MSSQL_CLEAN_INSERT.</td>
                <td>Yes</td>
              </tr>
              <tr> 
                <td>src</td>
                <td>The xml source upon which the operation is to be performed</td>
                <td>Yes</td>
              </tr>
              <tr> 
                <td>format</td>
                <td>Format type of supplied source file. Possible values are "flat" 
                  or "xml". Defaults to <a class="code">"flat"</a></td>
                <td> 
                  <p>No</p>
                </td>
              </tr>
            </table>
          </td>
        </tr>
        <!--
        <tr>
          <td>composite</td>
          <td>
            <p>Use nested <a class="code">&lt;composite&gt;</a> operation elements
              to combine multiple <a class="code">&lt;operation&gt;</a>s (on the
              same file) into a single one.</p>
            <table border="1">
              <tr>
                <td><b>Attribute</b></td>
                <td><b>Description</b></td>
                <td><b>Required</b></td>
              </tr>
              <tr>
                <td>src</td>
                <td>The xml source upon which the operation is to be performed</td>
                <td>Yes</td>
              </tr>
              <tr>
                <td>flat</td>
                <td>If true, use <a class="code">FlatXmlDataSet</a> type in the
                  supplied src file. Otherwise use <a class="code">XmlDataSet</a>.
                  Defaults to <a class="code">true</a></td>
                <td>
                  <p>No</p>
                </td>
              </tr>
            </table>
            <h4>Parameters specified as nested elements </h4>
            <table border="1">
              <tr>
                <td>operation</td>
                <td>See above definition for details. The src and flat attributes
                  are supplied as attributes to the <a class="code">&lt;composite&gt;</a>
                  step and should not be attempted to be overridden by the nested
                  <a class="code">&lt;operation&gt;</a> step.</td>
              </tr>
            </table>
          </td>
        </tr>
    -->
        <tr> 
          <td>export</td>
          <td> 
            <p>Use nested <a class="code">&lt;export&gt;</a> operation elements 
              to export the database to the supplied filename. The default operation 
              is to <a class="code">&lt;export&gt;</a> the entire database to 
              the destination filename with the supplied dataset type. You can 
              specify individual tables or queries to<br></br>
              <a class="code">&lt;export&gt;</a> by nesting them under the &lt;export&gt; 
              step.</p>
            <table width="100%" border="1">
              <tr> 
                <td><b>Attribute</b></td>
                <td><b>Description</b></td>
                <td><b>Required</b></td>
              </tr>
              <tr> 
                <td>dest</td>
                <td>The xml destination filename</td>
                <td>Yes</td>
              </tr>
              <tr> 
                <td>format</td>
                <td>Format type of supplied destination file. Possible values 
                  are "flat", "xml" or "dtd". Defaults 
                  to <a class="code">"flat"</a></td>
                <td> 
                  <p>No</p>
                </td>
              </tr>
            </table>
            <h4>Parameters specified as nested elements </h4>
            <table border="1">
              <tr> 
                <td>table</td>
                <td> 
                  <p>Use nested <a class="code">&lt;table&gt;</a> elements to <a class="code">&lt;export&gt;</a> 
                    specific tables. </p>
                  <table border="1">
                    <tr> 
                      <td><b>Attribute</b></td>
                      <td><b>Description</b></td>
                      <td><b>Required</b></td>
                    </tr>
                    <tr> 
                      <td>name</td>
                      <td>Name of the database table to export.</td>
                      <td>Yes</td>
                    </tr>
                  </table>
                </td>
              </tr>
              <tr> 
                <td>query</td>
                <td> 
                  <p>Use nested <a class="code">&lt;query&gt;</a> elements to <a class="code">&lt;export&gt;</a> 
                    data according to a sql statement. </p>
                  <table border="1">
                    <tr> 
                      <td><b>Attribute</b></td>
                      <td><b>Description</b></td>
                      <td><b>Required</b></td>
                    </tr>
                    <tr> 
                      <td>name</td>
                      <td>Name to reference the sql statement.</td>
                      <td>Yes</td>
                    </tr>
                    <tr> 
                      <td>sql</td>
                      <td>The sql to execute. You can use either SELECT * from 
                        Mytable or SELECT col1, col4 from MyTable</td>
                      <td>Yes</td>
                    </tr>
                  </table>
                </td>
              </tr>
            </table>
          </td>
        </tr>
      </table>
      <h3>Examples</h3>
      <pre>  &lt;dbunit driver="org.hsqldb.jdbcDriver"<br></br>          url="jdbc:hsqldb:."<br></br>          userid="sa"<br></br>          password=""&gt;
    &lt;classpath&gt;<br></br>    	&lt;pathelement location="/some/jdbc.jar"/&gt;<br></br>    &lt;/classpath&gt;<br></br>    &lt;operation type="UPDATE" src="updateFile.xml"/&gt;<br></br>  &lt;/dbunit&gt;</pre>
      <p> Connects to the database given in url as the dbunit user using the org.hsqldb.jdbcDriver, 
        searching it from /some/jdbc.jar as well from the system classpath, and 
        executes the UPDATE operation contained within the FlatXmlDataSet file 
        updateFile.xml.</p>
      <pre>  &lt;dbunit driver="org.hsqldb.jdbcDriver"<br></br>          url="jdbc:hsqldb:."<br></br>          userid="sa"<br></br>          password=""&gt;<br></br>    &lt;operation type="INSERT" src="insertFile.xml"/&gt;<br></br>    &lt;operation type="UPDATE" src="updateFile.xml"/&gt;<br></br>  &lt;/dbunit&gt;</pre>
      <p> Connects to the database given in url as the dbunit user using the org.hsqldb.jdbcDriver. 
        It then executes the INSERT operation contained within the FlatXmlDataSet 
        file insertFile.xml <br></br>
        followed by the execution of the UPDATE operation contained within the 
        FlatXmlDataSet file updateFile.xml.</p>
      <pre>  &lt;dbunit driver="org.hsqldb.jdbcDriver"<br></br>          url="jdbc:hsqldb:."<br></br>          userid="sa"<br></br>          password=""&gt;<br></br>    &lt;operation type="UPDATE" src="updateFile.xml" flat="false"/&gt;<br></br>  &lt;/dbunit&gt;</pre>
      <p> Connects to the database given in url as the dbunit user using the org.hsqldb.jdbcDriver 
        and executes the UPDATE operation contained within the XmlDataSet file 
        updateFile.xml.</p>
      <!--
      <pre>  &lt;dbunit driver=&quot;org.hsqldb.jdbcDriver&quot;<br>          url=&quot;jdbc:hsqldb:.&quot;<br>          userid=&quot;sa&quot;<br>          password=&quot;&quot;&gt;<br>    &lt;composite src=&quot;compositeFile.xml&quot;&gt;<br>      &lt;operation type=&quot;DELETE&quot;/&gt;<br>      &lt;operation type=&quot;INSERT&quot;/&gt;<br>    &lt;/composite&gt;<br>  &lt;/dbunit&gt;</pre>
      <p> Connects to the database given in url as the dbunit user using the org.hsqldb.jdbcDriver.
        It then executes the CompositeOperation, DELETE and then UPDATE, contained
        within the FlatXmlDataSet file updateFile.xml.</p>
      <pre>  &lt;dbunit driver=&quot;org.hsqldb.jdbcDriver&quot;<br>          url=&quot;jdbc:hsqldb:.&quot;<br>          userid=&quot;sa&quot;<br>          password=&quot;&quot;&gt;<br>    &lt;composite src=&quot;compositeFile.xml&quot; flat=&quot;false&quot;&gt;<br>      &lt;operation type=&quot;INSERT&quot;/&gt;<br>      &lt;operation type=&quot;UPDATE&quot;/&gt;<br>    &lt;/composite&gt;<br>  &lt;/dbunit&gt;</pre>
      <p> Connects to the database given in url as the dbunit user using the org.hsqldb.jdbcDriver.
        It then executes the CompositeOperation, DELETE and then UPDATE, contained
        within the XmlDataSet file updateFile.xml.</p>
        -->
      <pre>  &lt;dbunit driver="org.hsqldb.jdbcDriver"<br></br>          url="jdbc:hsqldb:."<br></br>          userid="sa"<br></br>          password=""&gt;<br></br>    &lt;export dest="exportFile.xml"/&gt;<br></br>  &lt;/dbunit&gt;</pre>
      <p> Connects to the database given in url as the dbunit user using the org.hsqldb.jdbcDriver 
        and exports the database to the given destination file as a FlatXmlDataSet. 
      </p>
      <pre>  &lt;dbunit driver="org.hsqldb.jdbcDriver"<br></br>          url="jdbc:hsqldb:."<br></br>          userid="sa"<br></br>          password=""&gt;<br></br>    &lt;export dest="exportNonFlatFile.xml" format="xml"/&gt;<br></br>  &lt;/dbunit&gt;</pre>
      <p> Connects to the database given in url as the dbunit user using the org.hsqldb.jdbcDriver 
        and exports the database to the given destination file as an XmlDataSet. 
      </p>
      <pre>  &lt;dbunit driver="org.hsqldb.jdbcDriver"<br></br>          url="jdbc:hsqldb:."<br></br>          userid="sa"<br></br>          password=""&gt;<br></br>    &lt;export dest="export.dtd" format="dtd"/&gt;<br></br>  &lt;/dbunit&gt;</pre>
      <p> Connects to the database given in url as the dbunit user using the org.hsqldb.jdbcDriver 
        and <br></br>
        exports the document type definition (dtd) describing the flat xml format.</p>
      <pre>  &lt;dbunit driver="org.hsqldb.jdbcDriver"<br></br>          url="jdbc:hsqldb:."<br></br>          userid="sa"<br></br>          password=""&gt;<br></br>    &lt;export dest="exportFile.xml"&gt;<br></br>      &lt;table name="FOO"/&gt;<br></br>      &lt;table name="BAR"/&gt;<br></br>    &lt;/export&gt;<br></br>  &lt;/dbunit&gt;</pre>
      <p> Connects to the database given in url as the dbunit user using the org.hsqldb.jdbcDriver 
        and exports the contents of the provided tables to the given destination 
        file as an FlatXmlDataSet. <br></br>
      </p>
      <pre>  &lt;dbunit driver="org.hsqldb.jdbcDriver"<br></br>          url="jdbc:hsqldb:."<br></br>          userid="sa"<br></br>          password=""&gt;<br></br>    &lt;export dest="exportFile.xml"&gt;<br></br>      &lt;table name="FOO"/&gt;<br></br>      &lt;query name="BAR" sql="SELECT COL1, COL2, COL3 as 'COLSPECIAL' FROM BAR WHERE COL1=4"/&gt;<br></br>    &lt;/export&gt;<br></br>  &lt;/dbunit&gt;</pre>
      <p> Connects to the database given in url as the dbunit user using the org.hsqldb.jdbcDriver 
        and exports the contents of the provided tables to the given destination 
        file as an FlatXmlDataSet. The contents of the BAR table are only shown 
        where col1 is equal to 4. Col3 is renamed COLSPECIAL as well. <br></br>
      </p>

</section></body></document>