<?xml version="1.0" encoding="UTF-8"?>
<faqs title="Frequently Asked Questions">

  <part id="general">
    <title>General</title>
   
<!--
    <faq id="supportedvendors">
      <question>
        Which relational database systems are supported?
      </question>
      <answer>
      <p>The Dbunit framework is actively developed and tested with Oracle and HypersonicSQL. 
        It uses a fairly simple SQL syntax and should be compatible with the other 
        database systems. <a href="support.html">Let us know</a> if you find any 
        incompatibilities.</p>
      </answer>
    </faq>
-->

    <faq id="build">
      <question>
        How to build DbUnit?
      </question>
      <answer>
      <p>Since version 2.0, DbUnit is build with <a href="http://maven.apache.org/">Maven 1.0-rc1</a>. See project <a href="dependencies.html">dependencies</a>.</p>
      </answer>
    </faq>

    <faq id="p6spy">
      <question>
     How to see SQL statements issued by DbUnit using P6Spy?
      </question>
      <answer>
     <p><a href="http://www.p6spy.com">P6Spy</a> is a trasparent JDBC proxy-driver 
      specialized to log the statements performed against the actual driver you normally would use.
      Using p6spy would allow to log the SQL statements issued by DbUnit.
      </p>
      <p>To install P6Spy, complete the following steps:
      <ol>
        <li>Put the p6spy.jar file in your classpath.
        </li><li>Move spy.properties into a directory listed in your classpath.  Unlike
        JAR files, you do not directly reference your property file in the
        classpath (e.g.: if you have the file c:\r\proj\confspy.properties make sure you 
        put c:\r\proj\conf in the classpath).
        </li><li>Modify your application to use the P6Spy database driver i.e.
        com.p6spy.engine.spy.P6SpyDriver.
        </li><li>Modify the realdriver line in the spy.properties file to reflect the
        wrapped database driver. An example of a modified realdriver line follows:
    	realdriver = oracle.jdbc.driver.OracleDriver
      </li></ol>
      Installation is complete. When you run your application, a spy.log file is
      generated in the same directory from where you run the application. 
      The log file contains a list of all of the database statements
      executed. You can change both the destination of spy.log and what it logs by
      editing the spy.properties file.</p>
      </answer>
    </faq>    

  </part>  

  <part id="use">
    <title>Using DbUnit</title>
    <faq id="extract">
      <question>
        How to extract a flat XML dataset from my database?
      </question>
      <answer>
      <p>
      The following sample demonstrates how you can export one or many tables
      from a database to an flat XML dataset file.
      <source>
public class DatabaseExportSample
{
    public static void main(String[] args) throws Exception
    {
        // database connection
        Class driverClass = Class.forName("org.hsqldb.jdbcDriver");
        Connection jdbcConnection = DriverManager.getConnection(
                "jdbc:hsqldb:sample", "sa", "");
        IDatabaseConnection connection = new DatabaseConnection(jdbcConnection);

        // partial database export
        String[] tableNames = {"TABLE1", "TABLE2", "TABLE2"};
        IDataSet partialDataSet = connection.createDataSet(tableNames);
        FlatXmlDataSet.write(partialDataSet, new FileOutputStream("partial.xml"));

        // full database export
        IDataSet fullDataSet = connection.createDataSet();
        FlatXmlDataSet.write(fullDataSet, new FileOutputStream("full.xml"));
    }
}</source></p>      </answer>
    </faq>

    <faq id="generatedtd">
      <question>
        How to generate a DTD representing my database schema?
      </question>
      <answer>
      <p>The following sample demonstrates how you can generate a flat xml dataset
        DTD from a database.</p>
      <source>
public class DatabaseExportSample
{
    public static void main(String[] args) throws Exception
    {
        // database connection
        Class driverClass = Class.forName("org.hsqldb.jdbcDriver");
        Connection jdbcConnection = DriverManager.getConnection(
                "jdbc:hsqldb:sample", "sa", "");
        IDatabaseConnection connection = new DatabaseConnection(jdbcConnection);

        // write DTD file
        FlatDtdDataSet.write(connection.createDataSet(),
                new FileOutputStream("test.dtd"));
    }
}</source>
      
      </answer>
    </faq>

    <faq id="multipleschema">
      <question>
        Can I work with multiple database schemas having tables with identical name?
      </question>
      <answer>
        Yes, see the <a href="properties.html#qualifiedtablenames">qualified table names</a> feature.
      </answer>
    </faq>

    <faq id="identity">
      <question>
        Can I use DbUnit with IDENTITY or auto-increment 
          columns?
      </question>
      <answer>
         <p>Auto-increment columns must be disabled in order to insert the dataset 
        values into the database. The way to disable this feature is database 
        specific. If your database does not provide a way to disable this feature 
        then you are out of luck and DbUnit cannot be used with it. </p>
      <p>DbUnit support IDENTITY columns for MS SQL Server 
        with the class <a href="components.html#IdentityInsertOperation">IdentityInsertOperation</a>. 
      </p>
      </answer>
    </faq>

    <faq id="flatxmlnull">
      <question>
     How to specify NULL values with flat XML dataset?
      </question>
      <answer>
      <p>See <a href="components.html#FlatXmlDataSet">FlatXmlDataSet documentation</a></p>
      </answer>
    </faq>  
    
    <faq id="views">
      <question>
      Can I use DbUnit with database views? 
      </question>
      <answer>
      <p>
      Yes. By default DbUnit is configured to only recognize normal tables. Modify the 
      <a href="properties.html#tabletype">table type property</a> to work with other table types.
      </p>
      <p>
      For example, use <code>{"TABLE", "VIEW"}</code> for views.
      </p>

      </answer>
    </faq>  
    
    <faq id="dateformat">
      <question>
      What are the dates formats used by XML dataset implementations?
      </question>
      <answer>
     <p>DbUnit use the JDBC escape formats for string representation.
      <table border="1">
        <tr> 
          <th>Type</th>
          <th>Format</th>
        </tr>
        <tr> 
          <td>DATE</td>
          <td>yyyy-mm-dd</td>
        </tr>
        <tr> 
          <td>TIME</td>
          <td>hh:mm:ss</td>
        </tr>
        <tr> 
          <td>TIMESTAMP</td>
          <td>yyyy-mm-dd hh:mm:ss.fffffffff</td>
        </tr>
      </table>
</p>
      </answer>
    </faq>    

    <faq id="typefactory">
      <question>
       How to replace the default data type factory?
      </question>
      <answer>
      <p>
You can replace the default DbUnit <a href="properties.html#typefactory">data type factory</a> to get support for custom data type. 
DbUnit provides extended factories for some vendors, which are located in <code>org.dbunit.ext</code> subpackages.
      </p>
      <p>
Here is how to use the Oracle factory:
<source>
    IDatabaseConnection connection = new DatabaseConnection(
            jdbcConnection, schema);
    DatabaseConfig config = connection.getConfig();
    config.setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY,
            new OracleDataTypeFactory());
</source>
      </p>
      <p>
Don't hesitate to submit your own implementation if you encounter types not currently supported by DbUnit. 
      </p>
      </answer>
    </faq>    
    
  </part>  

  <part id="use">
    <title>Errors</title>

    <faq id="outofmemory">
      <question>
        How to get rid of the infamous "OutOfMemoryError"?
      </question>
      <answer>
        <p>
        Historically, DbUnit has some memory consumption issues; especially when working with very large 
        dataset files. DbUnit 2.0 includes many improvements, like using SAX2 instead of the Electric XML 
        parser and and streamed XML dataset writing, to overcome the memory consumption problems.
        </p>
	<p>
        For compatibility reason, not all improvements are enabled by default. Depending of your 
        utilisation, some additional setup can makes a huge difference.
        </p>
	<h5>
	Database Export:
        </h5>

	<p>
	You should configure your DbUnit connection to use ForwardOnlyResultSetTable when exporting very 
	large dataset. ForwardOnlyResultSetTable is a very efficient database table implemtation useful 
	when random data access is not required. By default, DbUnit uses CachedResultSetTable which consume 
	more memory but provides random data access.
        </p>

	<p>
	Following sample shows how to configure your DbUnit connection to use
ForwardOnlyResultSetTable:
<source>
    IDatabaseConnection connection = new DatabaseConnection(
            jdbcConnection, schema);
    DatabaseConfig config = connection.getConfig();

    config.setProperty(DatabaseConfig.PROPERTY_RESULTSET_TABLE_FACTORY,
            new ForwardOnlyResultSetTableFactory());
</source>
        </p>
	<h5>
	Forward Database Operations:
	</h5>
	<p>
	Use the very efficient <a href="components.html#streamingdataset">StreamingDataSet</a> to load your XML dataset when 
	working with forward only database operations like UPDATE, INSERT, REFRESH. 
	</p>

      </answer>
    </faq>

    <faq id="tableseq">
      <question>
        Why I get a "Foreign keys constraint violation" error?
      </question>
      <answer>
        DbUnit operations insert and update tables' rows in the same order they are found in your 
        dataset and delete are done in reverse order. You must order your tables and rows 
        appropriately in your datasets to prevent foreign keys constraint violation.
        <br/>
	The <a href="components.html#filtereddataset">DatabaseSequenceFilter</a> can now be used to automatically determine the tables order using foreign/exported keys information. 
        <br/>
	The following sample demonstrate how to use this class to export a flat XML dataset:
<source>
IDatabaseConnection conn = new DatabaseConnection(jdbcConn);

ITableFilter filter = new DatabaseTableFilter(conn);
IDataSet dataset = new FilteredDataSet(filter, 
       conn.createDataSet());

FlatXmlDataSet.write(dataset, new File(fileName));
</source>
      </answer>
    </faq>
    
    <faq id="typenotrecognized">
      <question>
       Why I get a "data type not recognized" warning?
      </question>
      <answer>
      <p>
        By default, DbUnit only support standard JDBC data types. You will get this warning message if you are using vendor specific data types. 
      </p>
      <p>
Read how to <a href="#typefactory"> replace the default data type factory</a> and how to <a href="properties.html#typewarning">disable this warning message</a>.
      </p>

      </answer>
    </faq>    
    
    <faq id="clonedconnection">
      <question>
       Why I get a "Can't start a cloned connection" 
        exception when I use InsertIdentityOperation?
      </question>
      <answer>
        <p>If you are using the Microsoft driver (i.e. <a class="code">com.microsoft.jdbc.sqlserver.SQLServerDriver</a>), 
        you'll need to use the <a class="code">SelectMethod=cursor</a> parameter 
        in the JDBC connection string (as outlined by <a href="http://forum.java.sun.com/thread.jsp?forum=48&amp;thread=184797">this 
        JDC thread</a>). Your database Url would look something like the following: 
      <source>jdbc:microsoft:sqlserver://localhost:1433;DatabaseName=mydb;SelectMethod=cursor</source>
      </p>
      </answer>
    </faq>    
    
    <faq id="UnsatisfiedLinkError">
      <question>
      Why I get an "UnsatisfiedLinkError" 
        with the DB2 driver?
      </question>
      <answer>
       <p>DbUnit uses JDBC 2.0 features (batch updates). By default, DB2 installs 
        the JDBC 1.0 driver. You have to install the JDBC 2.0 driver in order 
        for DbUnit to work or you will get an <a class="code">UnsatisfiedLinkError</a> 
        from the DB2 JDBC 1.0 driver.</p>
      <p>The steps for installing the DB2 JDBC 2.0 driver are covered in the DB2 
        documentation.</p>
      </answer>
    </faq>    
    
    <faq id="AmbiguousTableNameException">
      <question>
     Why I get a AmbiguousTableNameException?
      </question>
      <answer>
      <p>This situation occurs when no schema is specified and that DbUnit detect 
        that it is getting columns information from multiple tables having the 
        same name and located in different schemas.</p>
      <p>You can solve this problem in three different ways:
      <ol>
        <li>Provide the schema name when creating the database connection. Note that for Oracle you must specify a all uppercase schema name.</li>
        <li>Ensure that the connection is restricted to access only one schema.</li>
        <li>Enable the <a href="properties.html#qualifiedtablenames">qualified table names</a> feature.</li>
      </ol>
      </p>
      </answer>
    </faq>     
    
  </part>
</faqs>